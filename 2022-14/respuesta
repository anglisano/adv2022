
import numpy as np

def read_input(path):
    with open(path) as f:
        lines=f.read().splitlines()
    lines_input=[]
    for k in lines:
        lines_input.append([j.split(',') for j in k.split(' -> ')])
    return lines_input

def normalize_list_input(list_input, min_x, min_y):
    list_input_normalized=[]
    for line in list_input:
        line_normalized=[]
        for point in line:
            point_normalized=[int(point[0])-min_x, int(point[1])-min_y]
            line_normalized.append(point_normalized)
        list_input_normalized.append(line_normalized)
    return list_input_normalized

def min_max_x_y(list_input):
    list_x=[]
    list_y=[]
    for k in list_input:
        for j in k:
            list_x.append(int(j[0]))
            list_y.append(int(j[1]))
    min_x=min(list_x)
    max_x=max(list_x)
    min_y=min(list_y)
    max_y=max(list_y)
    return min_x, max_x, min_y, max_y



def create_grid(min_x, max_x, min_y, max_y):
    grid=np.zeros(( max_y-min_y+1,max_x-min_x+1), dtype = str)
    # replace the 0 for . in the grid
    grid[grid=='']='.'
    return grid

def distance_of_tow_points(point_0, point_1):
    distance=[point_0[0]-point_1[0],point_0[1]-point_1[1]]
    return distance

def print_grid_with_input(grid, list_input_normalized):
    stone='#'
    for line in list_input_normalized:
        # from point to point in the line draw the stone
        point_0=line[0]
        # els punts estan al reves la x es la y i la y es la x algo raro pero es aixi
        # nomes o tindre en compte cuan pinto i punto alen
        for point in line:
            distance=distance_of_tow_points(point, point_0)
            absolute_distance=abs(distance[0])+ abs(distance[1])
            if distance[0]==0:
                x_i=0
            else:
                x_i=int(distance[0]/abs(distance[0]))
            if distance[1]==0:
                y_i=0
            else:
                y_i=int(distance[1]/abs(distance[1]))
            for i in range(absolute_distance):
                point_0=[point_0[0]+x_i, point_0[1]+y_i]
                grid[point_0[1], point_0[0]]=stone
            # update the point_0    
            point_0=point
            grid[point_0[1], point_0[0]]=stone
    return grid

class Sand:
    sand='0'
    def __init__(self,grid,initial_point,min_x,min_y=0):
        self.grid=grid
        self.min_x=min_x
        self.min_y=min_y
        self.initial_point=[initial_point[0]-min_x, 0]

    def extract_3_points_below(self,point_0):
        
        point_1=[point_0[0]-1, point_0[1]+1]
        point_2=[point_0[0], point_0[1]+1]
        point_3=[point_0[0]+1, point_0[1]+1]
        return  point_1, point_2, point_3

    def rule_fall_sand(self):
        point_0=self.initial_point
        free_fall=False
        c=0
        while self.grid[point_0[1]+1, point_0[0]]=='.' and free_fall==False: # while the point is empty
            

            # check 3 points below
            find_last_line=False
            while find_last_line==False:
                # c+=1
                # if c==71623:
                #     print(point_0)
                point_1, point_2, point_3=self.extract_3_points_below(point_0)
                # if point 2 is below 0 the sand stop following the rule
                if point_2[0]<0 or point_2[1]>self.grid.shape[0]-1:
                    free_fall=True
                    find_last_line=True
                    return self.grid
                if self.grid[point_2[1]][point_2[0]]=='.':
                    point_0=[point_0[0], point_0[1]+1]
                else:
                    # if point 1 and 3 are full then sand stop in point 2
                    if self.grid[point_1[1]][point_1[0]]!='.' and self.grid[point_3[1]][point_3[0]]!='.':
                        self.grid[point_0[1], point_0[0]]=self.sand
                        point_0=self.initial_point
                        find_last_line=True
                    # if point 1 is not full then convert ponit 0 into point 1 and continue
                    elif self.grid[point_1[1]][point_1[0]]=='.': 
                        point_0=point_1
                    # if point 3 is not full then convert ponit 0 into point 3 and continue
                    elif self.grid[point_3[1]][point_3[0]]=='.':
                        point_0=point_3
                    else:
                        a=1
                    #find_last_line=True
        

            #self.grid[point_0[1], point_0[0]]=self.sand

def main():
    # list_input=read_input('2022-14/input_example.txt')
    list_input=read_input('2022-14/input.txt')
    min_x, max_x, min_y, max_y=min_max_x_y(list_input)
    print(min_x, max_x, min_y, max_y)
    if min_y>0:
        min_y=0
    grid=create_grid(min_x, max_x, min_y, max_y)
    list_input_normalized=normalize_list_input(list_input, min_x, min_y)

    grid=print_grid_with_input(grid, list_input_normalized)
    print(grid)
    print('-'*50)
    faller=Sand(grid, [500, 0], min_x, min_y)
    grind_fill=faller.rule_fall_sand()
    print(grind_fill)
    #sum all the sand in the grid
    sand=0
    for line in grid:
        for point in line:
            if point=='0':
                sand+=1
    print(f'number of sand: {sand}')
    with open('test.txt', 'w') as f:
        for line in grid:
            f.write(''.join(line))
            f.write('\n')

    # now enter the sand with the sand rules!!!

    # part 2 make on infinit lane 2 lines below max_y
    points=[[min_x-max_y,max_y+2],[max_x+max_y,max_y+2]]
    list_input.append(points)
    min_x, max_x, min_y, max_y=min_max_x_y(list_input)
    print(min_x, max_x, min_y, max_y)
    if min_y>0:
        min_y=0
    grid=create_grid(min_x, max_x, min_y, max_y)
    list_input_normalized=normalize_list_input(list_input, min_x, min_y)

    grid=print_grid_with_input(grid, list_input_normalized)
    print(grid)
    print('-'*50)
    faller=Sand(grid, [500, 0], min_x, min_y)
    grind_fill=faller.rule_fall_sand()
    print(grind_fill)
    #sum all the sand in the grid
    sand=0
    for line in grid:
        for point in line:
            if point=='0':
                sand+=1
    print(f'number of sand: {sand}')
    with open('test.txt', 'w') as f:
        for line in grid:
            f.write(''.join(line))
            f.write('\n')
if __name__=='__main__':
    main()